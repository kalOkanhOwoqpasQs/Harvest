for i, bot in pairs(getBots()) do
    if getBot().name:upper() == bot.name:upper() then
        indexbot = i
    end
end

seed = block + 1
worlds = {}
infoid = {}
index = 1
local tilePack = 0
local tileBlock = 0
local tileSeed = 0
local tileEvent = 0
local identity = {}
identity.block = 1
identity.seed = 1
identity.pack = 1
identity.event = 1
identity.goodtime = os.time()
seedX = dropseedX - 1
seedY = dropseedY - 1
packX = droppackX - 1
packY = droppackY - 1
blockX = dropblockX - 1
blockY = dropblockY - 1
eventX = dropeventX - 1
eventY = dropeventY -1
strings = ""

for i =  1,worldperbot do
    table.insert(worlds,farmList[math.floor((indexbot - 1) * worldperbot + i)])
end

identity.recycles = function()
    if findItem(block) > 0 then
        sendPacket("action|trash\n|itemID|"..block,2)
        sleep(4000)
        sendPacket("action|dialog_return\ndialog_name|trash_item\nitemID|" .. block .. "|\ncount|" .. findItem(block),2)
        sleep(4000)
    end
end

identity.splitt = function(str, ptr)
    if not ptr then 
        ptr = "%s"
    end
    local tbl = {}
    for string in string.gmatch(str, ptr) do
        table.insert(tbl, string) 
    end
    return tbl
end

identity.botstatus = function()
    strings = ""
    for _, bot in pairs(getBots()) do
        if short then
            strings = strings.."\n"..""..(string.sub(bot.name,1,3)).." | ||"..(string.sub(bot.world,1,3)).."|| | "..(string.upper(bot.status,1,2)).."" 
        else
            strings = strings.."\n"..""..(string.upper(bot.name)).." | ||"..(string.upper(bot.world)).."|| | "..(string.upper(bot.status)).."" 
        end
    end
    return strings
end

identity.hookblock = function()
    strings = ""
	for i = 1, #storageblock do
        if short then
            strings = strings.."\n[ ||"..(string.sub(storageblock[i],1,3)).."|| ] "..(infoid[storageblock[i]] or "?")..""
        else
            strings = strings.."\n[ ||"..string.upper(storageblock[i]).."|| ] "..(infoid[storageblock[i]] or "?")..""
        end
    end
    return strings
end

identity.hookseed = function()
    strings = ""
	for i = 1, #storageseed do
        if short then
            strings = strings.."\n[ ||"..(string.sub(storageseed[i],1,3)).."|| ] "..(infoid[storageseed[i]] or "?")..""
        else
            strings = strings.."\n[ ||"..string.upper(storageseed[i]).."|| ] "..(infoid[storageseed[i]] or "?")..""
        end
    end
    return strings
end

identity.hookpack = function()
    strings = ""
	for i = 1, #storagepack do
        if short then
            strings = strings.."\n[ ||"..(string.sub(storagepack[i],1,3)).."|| ] "..(infoid[storagepack[i]] or "?")..""
        else
            strings = strings.."\n[ ||"..string.upper(storagepack[i]).."|| ] "..(infoid[storagepack[i]] or "?")..""
        end
    end
    return strings
end

identity.hookevent = function()
    strings = ""
	for i = 1, #storageevent do
        if short then
            strings = strings.."\n[ ||"..(string.sub(storageevent[i],1,3)).."|| ] "..(infoid[storageevent[i]] or "?")..""
        else
            strings = strings.."\n[ ||"..string.upper(storageevent[i]).."|| ] "..(infoid[storageevent[i]] or "?")..""
        end
    end
    return strings
end

identity.webhookinfo = function()
	if infostorage then
        local text = [[
            $webHookUrl = "]]..linkinfostorage..[[/messages/]]..messageidinfostorage..[["
            $payload = @{
                username = "BizzantiuM's"
                embeds = @(
                    @{
                        title = "AUTO HARVEST v1.2 []]..string.upper(typeMode)..[[]"
                        color = "]]..math.random(111111,999999)..[["
                        fields = @(
                            @{
                                name = ""
                                value = "]].."RUNNING : [ "..identity.goodtimes(os.difftime(os.time(),identity.goodtime)).." ]"..[["
                                inline = "false"
                            }
                            @{
                                name = "BOT INFO"
                                value = "]]..identity.botstatus()..[["
                                inline = "false"
                            }
                            @{
                                name = "STORAGE STATIC"
                                value = "]]..""..[["
                                inline = "false"
                            }
                            @{
                                name = "BLOCK"
                                value = "]]..identity.hookblock()..[["
                                inline = "false"
                            }
                            @{
                                name = "SEED"
                                value = "]]..identity.hookseed()..[["
                                inline = "true"
                            }
                            @{
                                name = "PACK"
                                value = "]]..identity.hookpack()..[["
                                inline = "true"
                            }
                            @{
                                name = "EVENT"
                                value = "]]..identity.hookevent()..[["
                                inline = "true"
                            }
                        )
                        footer = @{
                            text = "[Hydrotrium] Developed by BizzantiuM's`nLast updated : ]]..(os.date"%d/%m/%y":upper().." at ")..os.date("%I")..":"..os.date("%M").." "..os.date("%p"):upper()..[["
                        }
                    }
                )
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
        ]]
        local pipe = io.popen("powershell -command -", "w")
        pipe:write(text)
        pipe:close()
    end
end

identity.botinfo = function(text)
    if webhookstatus then
        text = [[
            $webHookUrl = "]]..webhookstatuslink..[["
            $payload = @{
                content = "]]..text..[["
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType "application/json"
        ]]
        local file = io.popen("powershell -command -", "w")
        file:write(text)
        file:close()
    end
end

identity.goodtimes = function(estimates)
    local seconds = tonumber(estimates)
    if seconds <= 0 then
        return "00:00:00";
    else
        hours = string.format("%02.f", math.floor(estimates/3600));
        minutes = string.format("%02.f", math.floor(estimates/60 - (hours*60)));
        seconds = string.format("%02.f", math.floor(estimates - hours*3600 - minutes *60));
        return ""..hours.." : "..minutes.." : "..seconds
    end
end

identity.warp = function(world,door)
    name = world
    if door ~= "" then
        name = name .. "|" ..door
    end
    if getBot().world ~= string.upper(world) then
        addHook("onvariant","nuked",function (varlist)
            if varlist[0] == "OnConsoleMessage" then
                if string.find(varlist[1],"inaccessible.") then
                    nuked = true
                end
                if string.find(varlist[1], "experiencing high load,") then
                    subserver = true
                end
                if string.find(varlist[1], "people in it.") then
                    people = true
                end
                if string.find(varlist[1], "Players lower than level") then
                    level = true
                end
            end
        end)
        while getBot().world ~= string.upper(world) and not nuked and not subserver and not people and not level do
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "maintenance" then
                    identity.botinfo("[ ||"..getBot().name.."|| ] status is "..getBot().status..", removing bot @everyone")
                    if removeBot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
            end
            sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
            sleep(delaywarp)
        end
        removeHooks()
        sleep(2000)
    end
    if getBot().world == string.upper(world) then
        if door ~= "" then
            local stuck = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 and not wrong do
                while getBot().status ~= "online" do
                    connect()
                    sleep(delayreconnect)
                    if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "maintenance" then
                        identity.botinfo("[ ||"..getBot().name.."|| ] status is "..getBot().status..", removing bot @everyone")
                        if removeBot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                end
                sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
                sleep(delaywarp)
                stuck = stuck + 1
                if stuck == 5 then
                    wrong = true
                end
            end
        end
    end
end

identity.reconnect = function(world,id,x,y)
    if getBot().world == "EXIT" and getBot().status == "online" then 
        identity.botinfo("[ ||"..getBot().name.."|| ] at EXIT ??, trying to joining world again @everyone")
        local count = 0
        while getBot().world ~= world:upper() do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if getBot().world ~= world:upper() then 
                count = count + 1
                if count > 5 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to joining world again, terminated script @everyone")
                    error()
                end
            end
        end
        if id ~= "" then
            local stucks = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                sleep(delaywarp)
                if stucks > 3 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    error()
                end
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        identity.botinfo("[ ||"..getBot().name.."|| ] success to joining world @everyone")
    end
    if getBot().status ~= "online" then
        identity.botinfo("[ ||"..getBot().name.."|| ] status is "..getBot().status.." @everyone")
        while getBot().status ~= "online" do
            connect()
            sleep(delayreconnect)
            if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "maintenance" then
                identity.botinfo("[ ||"..getBot().name.."|| ] status is "..getBot().status..", removing bot @everyone")
                if removeBot then
                    removeBot(getBot().name)
                    sleep(2000)
                end
                error()
            end
        end
        local counts = 0
        while getBot().world ~= world:upper() do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if getBot().world ~= world:upper() then 
                counts = counts + 1
                if counts > 5 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to joining world again, terminated script @everyone")
                    error()
                end
            end
        end
        if id ~= "" then
            local stuckk = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                sleep(delaywarp)
                if stuckk > 3 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    error()
                end
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        identity.botinfo("[ ||"..getBot().name.."|| ] status is "..getBot().status.." @everyone")
    end
    if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
        identity.botinfo("[ ||"..getBot().name.."|| ] Stuck at white door ! @everyone")
        local stuck = 0
        if id ~= "" then
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                sleep(delaywarp)
                if stuck > 3 then
                    identity.botinfo("[ ||"..getBot().name.."|| ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    error()
                end
            end
        end
        if x and y then
            while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                findPath(x,y)
                sleep(150)
            end
        end
        identity.botinfo("[ ||"..getBot().name.."|| ] Already back to pos ! @everyone")
    end
end

identity.itemFloat = function(id)
	local count = 0
	for _, obj in pairs(getObjects()) do
		if obj.id == id then
			count = count + obj.count
		end
	end
	return count
end

identity.joinworld = function()
    for _, world in pairs(worldclearhistory) do
        ::BACK::
        setJob("Clearing history")
        identity.warp(world,"")
        move(1,0)
        sleep(250)
        identity.reconnect(world,"")
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                    else
                        nuked = false
                        sleep(5000)
                        print("World clearing history has nuked!!, change ur world history list")
                        identity.botinfo("World clearing history has nuked!!, change ur world history list. SC Terminated @everyone")
                        error()
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto BACK
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur world history list")
                identity.botinfo("World : "..world.." has level limit, change ur world history list. SC Terminated @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
end

identity.buying = function(threads)
    setJob("Buying packs")
    if findItem(112) >= mingems then
        while findItem(112) >= mingems do
            if upbackpack then
                while getBot().slots < 36 do
                    sendPacket("action|buy\nitem|upgrade_backpack",2)
                    sleep(2000)
                end
            end
            sendPacket("action|buy\nitem|"..debug,2)
            sleep(3000)
            if findItem(packList[1]) >= 200 then
                break
            end
        end
    end
end

identity.storingevents = function(threads)
    for i = identity.event , #storageevent do
        ::Here::
        setJob("Dropping events")
        world = storageevent[i]
        identity.warp(world,doorstorageevent)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(itemevent[1]) >= limitevent then
                                infoid[world] = "["..identity.itemFloat(itemevent[1]).."] LIMIT !!!"
                                identity.botinfo("Events storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                                print("Events storage : [ "..world.." ] has reached limit, skipped world")
                                identity.event = identity.event + 1
                                if identity.event > #storageevent then
                                    infoid[world] = "["..identity.itemFloat(itemevent[1]).."] LIMIT !!!"
                                    identity.botinfo("All events storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                    print("All events storage has reached limit, Removing bot : [ "..getBot().name.." ]")
                                    if removeBot then
                                        removeBot(getBot().name)
                                        sleep(2000)
                                    end
                                    error()
                                end
                                tileEvent = 0
                            else
                                for y,pack in pairs(itemevent) do
                                    for i,tile in pairs(getTiles()) do
                                        if separated then
                                            if tile.fg == 0 or tile.bg == 0 then
                                                ::BACK::
                                                findPath(eventX + (tileEvent),eventY - (y - 1))
                                                sleep(1000)
                                                local count = 0
                                                identity.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY - (y - 1))
                                                if eventX + (tileEvent) >= 98 then
                                                    eventY = eventY - 1
                                                    tileEvent = 0
                                                end
                                                while findItem(pack) > 0 do
                                                    drop(pack)
                                                    sleep(delaydrop)
                                                    identity.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY - (y - 1))
                                                    count = count + 1
                                                    if count >= 2 then
                                                        tileEvent = tileEvent + 1
                                                        goto BACK
                                                    end
                                                end
                                            end
                                            if findItem(pack) == 0 then
                                                break
                                            end
                                        else
                                            if tile.fg == 0 or tile.bg == 0 then
                                                ::BACK::
                                                findPath(eventX + (tileEvent),eventY)
                                                sleep(1000)
                                                local count = 0
                                                identity.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY)
                                                if eventX + (tileEvent) >= 98 then
                                                    eventY = eventY - 1
                                                    tileEvent = 0
                                                end
                                                while findItem(pack) > 0 do
                                                    drop(pack)
                                                    sleep(delaydrop)
                                                    identity.reconnect(world,doorstorageevent,eventX + (tileEvent),eventY)
                                                    count = count + 1
                                                    if count >= 2 then
                                                        tileEvent = tileEvent + 1
                                                        goto BACK
                                                    end
                                                end
                                            end
                                            if findItem(pack) == 0 then
                                                break
                                            end
                                        end
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door events storage is wrong, check ur id door!")
                            identity.botinfo("[ ||"..world.."|| ] Id door events storage is wrong, check ur id door! @everyone")
                            identity.event = identity.event + 1
                            if identity.event > #storageevent then
                                print("All events storage has reached limit")
                                identity.botinfo("All events storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                if removeBot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tileEvent = 0
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] event Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] event Storage is NUKED, check ur storage! @everyone")
                        identity.event = identity.event + 1
                        if identity.event > #storageevent then
                            print("All events storage has reached limit!")
                            identity.botinfo("All events storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            if removeBot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileEvent = 0
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(itemevent[1]).."]"
    if clearhistory then
        identity.joinworld()
    end
end

identity.storingpacks = function(threads)
    for i = identity.pack , #storagepack do
        ::Here::
        setJob("Dropping packs")
        world = storagepack[i]
        identity.warp(world,doorstoragepack)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(packList[1]) >= limitpack then
                                infoid[world] = "["..identity.itemFloat(packList[1]).."] LIMIT !!!"
                                identity.botinfo("Packs storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                                print("Packs storage : [ "..world.." ] has reached limit, skipped world")
                                identity.pack = identity.pack + 1
                                if identity.pack > #storagepack then
                                    infoid[world] = "["..identity.itemFloat(packList[1]).."] LIMIT !!!"
                                    identity.botinfo("All packs storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                    print("All packs storage has reached limit, Removing bot : [ "..getBot().name.." ]")
                                    if removeBot then
                                        removeBot(getBot().name)
                                        sleep(2000)
                                    end
                                    error()
                                end
                                tilePack = 0
                            else
                                for y,pack in pairs(packList) do
                                    for i,tile in pairs(getTiles()) do
                                        if separated then
                                            if tile.fg == 0 or tile.bg == 0 then
                                                ::BACK::
                                                findPath(packX + (tilePack),packY - (y-1))
                                                sleep(1000)
                                                local count = 0
                                                identity.reconnect(world,doorstoragepack,packX + (tilePack),packY - (y-1))
                                                if packX + (tilePack) >= 98 then
                                                    packY = packY - 1
                                                    tilePack = 0
                                                end
                                                while findItem(pack) > 0 do
                                                    drop(pack)
                                                    sleep(delaydrop)
                                                    identity.reconnect(world,doorstoragepack,packX + (tilePack),packY - (y-1))
                                                    count = count + 1
                                                    if count >= 2 then
                                                        tilePack = tilePack + 1
                                                        goto BACK
                                                    end
                                                end
                                            end
                                            if findItem(pack) == 0 then
                                                break
                                            end
                                        else
                                            if tile.fg == 0 or tile.bg == 0 then
                                                ::BACK::
                                                findPath(packX + (tilePack),packY)
                                                sleep(1000)
                                                local count = 0
                                                identity.reconnect(world,doorstoragepack,packX + (tilePack),packY)
                                                if packX + (tilePack) >= 98 then
                                                    packY = packY - 1
                                                    tilePack = 0
                                                end
                                                while findItem(pack) > 0 do
                                                    drop(pack)
                                                    sleep(delaydrop)
                                                    identity.reconnect(world,doorstoragepack,packX + (tilePack),packY)
                                                    count = count + 1
                                                    if count >= 2 then
                                                        tilePack = tilePack + 1
                                                        goto BACK
                                                    end
                                                end
                                            end
                                            if findItem(pack) == 0 then
                                                break
                                            end
                                        end
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door packs storage is wrong, check ur id door!")
                            identity.botinfo("[ ||"..world.."|| ] Id door packs storage is wrong, check ur id door! @everyone")
                            identity.pack = identity.pack + 1
                            if identity.pack > #storagepack then
                                print("All packs storage has reached limit")
                                identity.botinfo("All packs storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                if removeBot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tilePack = 0
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] packs Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] packs Storage is NUKED, check ur storage! @everyone")
                        identity.pack = identity.pack + 1
                        if identity.pack > #storagepack then
                            print("All packs storage has reached limit!")
                            identity.botinfo("All packs storage has reached limit! Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                            if removeBot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tilePack = 0
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(packList[1]).."]"
    if clearhistory then
        identity.joinworld()
    end
end

identity.storingseeds = function(threads)
    for i = identity.seed , #storageseed do
        ::Here::
        world = storageseed[i]
        setJob("Dropping seeds")
        identity.warp(world,doorstorageseed)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(seed) >= limitseed then
                                infoid[world] = "["..identity.itemFloat(seed).."] LIMIT !!!"
                                identity.botinfo("Seeds storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                                print("Seeds storage : [ "..world.." ] has reached limit, skipped world")
                                identity.seed = identity.seed + 1
                                if identity.seed > #storageseed then
                                    infoid[world] = "["..identity.itemFloat(seed).."] LIMIT !!!"
                                    identity.botinfo("All seeds storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                    print("All seeds storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                                    if removeBot then
                                        removeBot(getBot().name)
                                        sleep(2000)
                                    end
                                    error()
                                end
                                tileSeed = 0
                            else
                                for i,tile in pairs(getTiles()) do
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(seedX + (tileSeed),seedY)
                                        sleep(1000)
                                        local count = 0
                                        identity.reconnect(world,doorstorageseed,seedX + (tileSeed),seedY)
                                        if seedX + (tileSeed) >= 98 then
                                            seedY = seedY - 1
                                            tileSeed = 0
                                        end
                                        while findItem(seed) > 0 do
                                            drop(seed)
                                            sleep(delaydrop)
                                            identity.reconnect(world,doorstorageseed,seedX + (tileSeed),seedY)
                                            count = count + 1
                                            if count >= 2 then
                                                tileSeed = tileSeed + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(seed) == 0 then
                                        break
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door seeds storage is wrong, check ur id door!")
                            identity.botinfo("[ "..world.." ] Id door seeds storage is wrong, check ur id door! @everyone")
                            identity.seed = identity.seed + 1
                            if identity.seed > #storageseed then
                                print("All seeds storage has reached limit")
                                identity.botinfo("All seeds storage has reached limit @everyone")
                                if removeBot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tileSeed = 0
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] seeds Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] seeds Storage is NUKED, check ur storage! @everyone")
                        identity.seed = identity.seed + 1
                        if identity.seed > #storageseed then
                            print("All seeds storage has reached limit!")
                            identity.botinfo("All seeds storage has reached limit! @everyone")
                            if removeBot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileSeed = 0
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(seed).."]"
    if clearhistory then
        identity.joinworld()
    end
end

identity.storingblocks = function(threads)
    for i = identity.block , #storageblock do
        ::Here::
        world = storageblock[i]
        setJob("Dropping Blocks")
        identity.warp(world,doorstorageblock)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if identity.itemFloat(block) >= limitblock then
                                infoid[world] = "["..identity.itemFloat(block).."] LIMIT !!!"
                                identity.botinfo("Blocks storage : [ ||"..world.."|| ] has reached limit, skipped world @everyone")
                                print("Blocks storage : [ "..world.." ] has reached limit, skipped world")
                                
                                identity.block = identity.block + 1
                                if identity.block > #storageblock then
                                    infoid[world] = "["..identity.itemFloat(block).."] LIMIT !!!"
                                    identity.botinfo("All blocks storage has reached limit, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                                    print("All blocks storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                                    if removeBot then
                                        removeBot(getBot().name)
                                        sleep(2000)
                                    end
                                    error()
                                end
                                tileBlock = 0
                            else
                                for i,tile in pairs(getTiles()) do
                                    if tile.fg == 0 or tile.bg == 0 then
                                        ::BACK::
                                        findPath(blockX + (tileBlock),blockY)
                                        sleep(1000)
                                        local count = 0
                                        identity.reconnect(world,doorstorageblock,blockX + (tileBlock),blockY)
                                        if blockX + (tileBlock) >= 98 then
                                            blockY = blockY - 1
                                            tileBlock = 0
                                        end
                                        while findItem(block) > 0 do
                                            drop(block)
                                            sleep(delaydrop)
                                            identity.reconnect(world,doorstorageblock,blockX + (tileBlock),blockY)
                                            count = count + 1
                                            if count >= 2 then
                                                tileBlock = tileBlock + 1
                                                goto BACK
                                            end
                                        end
                                    end
                                    if findItem(block) == 0 then
                                        break
                                    end
                                end
                                sleep(100)
                                break
                            end
                        else
                            infoid[world] = "WRONG DOOR !!!"
                            wrong = false
                            sleep(5000)
                            print("[ "..world.." ] Id door blocks storage is wrong, check ur id door!")
                            identity.botinfo("[ "..world.." ] Id door blocks storage is wrong, check ur id door! @everyone")
                            identity.block = identity.block + 1
                            if identity.block > #storageblock then
                                print("All blocks storage has reached limit")
                                identity.botinfo("All blocks storage has reached limit @everyone")
                                if removeBot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tileBlock = 0
                        end
                    else
                        infoid[world] = "NUKED !!!"
                        nuked = false
                        sleep(5000)
                        print("[ "..world.." ] blocks Storage is NUKED, check ur storage!")
                        identity.botinfo("[ "..world.." ] blocks Storage is NUKED, check ur storage! @everyone")
                        identity.block = identity.block + 1
                        if identity.block > #storageblock then
                            print("All blocks storage has reached limit!")
                            identity.botinfo("All blocks storage has reached limit! @everyone")
                            if removeBot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileBlock = 0
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto Here
                end
            else
                level = false
                sleep(5000)
                print("World : "..world.." has level limit, change ur level world limit")
                identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..world.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..identity.itemFloat(block).."]"
    if clearhistory then
        identity.joinworld()
    end
end

identity.rechecking = function(threads)
    for i = 1,2 do
        for _, tile in pairs(getTiles()) do
            if tile.fg == seed and tile.ready then
                if findItem(idwearitem) == 0 then
                    if wearitem then
                        identity.support()
                        setJob("Rechecking")
                        identity.warp(threads,doorfarmList)
                    end
                end
                if findItem(block) > 180 then
                    if recycle then
                        identity.recycles(threads)
                    else
                        identity.storingblocks(threads)
                        setJob("Rechecking")
                        identity.warp(threads,doorfarmList)
                    end
                end
                if findItem(itemevent[1]) > amount then
                    identity.storingevents(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                elseif findItem(seed) > 180 then
                    identity.storingseeds(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                elseif findItem(112) >= mingems and buypack then
                    identity.buying(threads)
                    identity.storingpacks(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                end
                findPath(tile.x,tile.y)
                sleep(25)
                identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                if tile.fg == seed then
                    punch(0,0)
                    sleep(delayharvest)
                    identity.reconnect(threads,doorfarmList,tile.x,tile.y)
                end
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                sleep(delaycollect)
            end
        end
    end
    for _, obj in pairs(getObjects()) do
        if obj.id == block then
            if identity.itemFloat(block) ~= 0 then
                findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                sleep(delaycollect)
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                sleep(delaycollect)
                identity.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
            end
            if findItem(block) > 180 then
                if recycle then
                    identity.recycles(threads)
                else
                    identity.storingblocks(threads)
                    setJob("Rechecking")
                    identity.warp(threads,doorfarmList)
                end
            end
            if findItem(itemevent[1]) > amount then
                identity.storingevents(threads)
                setJob("Rechecking")
                identity.warp(threads,doorfarmList)
            elseif findItem(seed) > 180 then
                identity.storingseeds(threads)
                setJob("Rechecking")
                identity.warp(threads,doorfarmList)
            elseif findItem(112) > mingems and buypack then
                identity.buying(threads)
                identity.storingpacks(threads)
                setJob("Rechecking")
                identity.warp(threads,doorfarmList)
            end
        end
    end
end

identity.running = function(threads)
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    if typeMode == "harvest" then
        for y = -1, 53 do
            for x = tileA, tileB, tileC do
                if getTile(x,y).fg == seed and getTile(x,y).ready then
                    if findItem(idwearitem) == 0 then
                        if wearitem then
                            identity.support()
                            setJob("Harvest")
                            identity.warp(threads,doorfarmList)
                        end
                    end
                    if findItem(block) > 180 then
                        if recycle then
                            identity.recycles(threads)
                        else
                            identity.storingblocks(threads)
                            setJob("Harvest")
                            identity.warp(threads,doorfarmList)
                        end
                    end
                    if findItem(itemevent[1]) > amount then
                        identity.storingevents(threads)
                        setJob("Harvest")
                        identity.warp(threads,doorfarmList)
                    elseif findItem(seed) > 180 then
                        identity.storingseeds(threads)
                        setJob("Harvest")
                        identity.warp(threads,doorfarmList)
                    elseif findItem(112) > mingems and buypack then
                        identity.buying(threads)
                        identity.storingpacks(threads)
                        setJob("Harvest")
                        identity.warp(threads,doorfarmList)
                    end
                    findPath(x,y)
                    sleep(25)
                    identity.reconnect(threads,doorfarmList,x,y)
                    if getTile(x,y).fg == seed then
                        punch(0,0)
                        sleep(delayharvest)
                        identity.reconnect(threads,doorfarmList,x,y)
                    end
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(25)
                end
            end
            if tileD == 1 then
                if tileA == 0 then
                    tileA = 99
                    tileB = 0
                    tileC = -1
                    tileD = 0
                elseif tileA == 99 then
                    tileA = 0
                    tileB = 99
                    tileC = 1
                    tileD = 0
                end
            elseif tileD == 0 then
                tileD = tileD + 1
            end
        end
    elseif typeMode == "collect" then
        for _, obj in pairs(getObjects()) do
            if obj.id == block then
                if identity.itemFloat(block) ~= 0 then
                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                    sleep(delaycollect)
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                    identity.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
                end
                if findItem(block) > 180 then
                    if recycle then
                        identity.recycles(threads)
                    else
                        identity.storingblocks(threads)
                        setJob("Collect")
                        identity.warp(threads,doorfarmList)
                    end
                end
                if findItem(itemevent[1]) > amount then
                    identity.storingevents(threads)
                    setJob("Collect")
                    identity.warp(threads,doorfarmList)
                elseif findItem(seed) > 180 then
                    identity.storingseeds(threads)
                    setJob("Collect")
                    identity.warp(threads,doorfarmList)
                elseif findItem(112) > mingems and buypack then
                    identity.buying(threads)
                    identity.storingpacks(threads)
                    setJob("Collect")
                    identity.warp(threads,doorfarmList)
                end
            end
        end
    elseif typeMode == "gems" then
        for _, obj in pairs(getObjects()) do
            if obj.id == 112 then
                if identity.itemFloat(obj.id) ~= 0 then
                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                    sleep(delaycollect)
                    if ignoregems then
                        collect(range,112)
                    else
                        collect(range)
                    end
                    sleep(delaycollect)
                    identity.reconnect(threads,doorfarmList,math.floor(obj.x / 32),math.floor(obj.y / 32))
                end
                if findItem(112) > mingems and buypack then
                    identity.buying(threads)
                    identity.storingpacks(threads)
                    setJob("Collect gems")
                    identity.warp(threads,doorfarmList)
                end
            end
        end
    end
end

identity.dropnpg = function()
    ::BACK::
    setJob("Dropping NPG")
    world = identity.splitt(worldnpg[index],"[^:]+")[1]
    door = identity.splitt(worldnpg[index],"[^:]+")[2]
    identity.warp(world,door)
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        while findItem(6086) > 0 do
                            drop(6086)
                            sleep(delaydrop)
                            move(0,-1)
                            sleep(250)
                        end
                    else
                        wrong = false
                        sleep(5000)
                        print("Id door world npg is wrong, check ur id door !!")
                        identity.botinfo("Id door world npg is wrong, check ur id door !! @everyone")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    print("World npg is nuked, check ur world !!")
                    identity.botinfo("World npg is nuked, check ur world !! @everyone")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            level = false
            sleep(5000)
            print("World : "..world.." has level limit, change ur level world limit")
            identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World : "..world.." has full people, sleeping for 2 minutes")
        identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end

identity.npg = function()
    ::BACK::
    setJob("Taking NPG")    
    world = identity.splitt(worldnpg[index],"[^:]+")[1]
    door = identity.splitt(worldnpg[index],"[^:]+")[2]
    identity.warp(world,door)
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        while findItem(6086) == 0 do
                            for _, obj in pairs(getObjects()) do
                                if obj.id == 6086 then
                                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                                    sleep(1000)
                                    collect(2)
                                    sleep(1000)
                                    identity.reconnect(world,door,math.floor(obj.x / 32),math.floor(obj.y / 32))
                                end
                                if findItem(6086) > 0  then
                                    break
                                end
                            end
                        end
                        wear(6086)
                        sleep(500)
                        move(-1,0)
                        sleep(1000)
                        if findItem(6086) > 1 then
                            drop(6086,findItem(6086) - 1)
                            sleep(delaydrop)
                        end
                    else
                        wrong = false
                        sleep(5000)
                        print("Id door world npg is wrong, check ur id door !!")
                        identity.botinfo("Id door world npg is wrong, check ur id door !! @everyone")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    print("World npg is nuked, check ur world !!")
                    identity.botinfo("World npg is nuked, check ur world !! @everyone")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            level = false
            sleep(5000)
            print("World : "..world.." has level limit, change ur level world limit")
            identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World : "..world.." has full people, sleeping for 2 minutes")
        identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end

identity.killing = function()
    for _, worlds in pairs(farmList) do
        ::BACK::
        setJob("Killing ghost")
        identity.warp(worlds,"")
        identity.reconnect(worlds,"")
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        sleep(delaykill)
                    else
                        nuked = false
                        sleep(5000)
                        print(""..worlds.." is NUKED!, check ur world !!")
                        identity.botinfo("[ ||"..worlds.."|| ] is NUKED!, check ur world !! @everyone")
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto BACK
                end
            else
                level = false
                sleep(5000)
                print("World : "..worlds.." has level limit, change ur level world limit")
                identity.botinfo("World : "..worlds.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..worlds.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..worlds.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
end

identity.support = function()
    ::BACK::
    setJob("Take support items")
    world = identity.splitt(worldwearitem[index],"[^:]+")[1]
    door = identity.splitt(worldwearitem[index],"[^:]+")[2]
    identity.warp(world,door)
    if not people then
        if not level then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if findItem(idwearitem) == 0 and identity.itemFloat(idwearitem) >= keep then
                            for _, obj in pairs(getObjects()) do
                                if obj.id == idwearitem then
                                    findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                                    sleep(1000)
                                    collect(range)
                                    sleep(1000)
                                    identity.reconnect(world,door,math.floor(obj.x / 32),math.floor(obj.y / 32))
                                    if findItem(idwearitem) > 0  then
                                        move(-1,0)
                                        sleep(500)
                                        wear(idwearitem)
                                        sleep(500)
                                        drop(idwearitem,findItem(idwearitem) - keep)
                                        sleep(500)
                                        print("[ ||"..getBot().name.."|| ] Success take and wear the support items!")
                                        identity.botinfo("[ ||"..getBot().name.."|| ] Success take and wear the support items!")
                                        break
                                    end
                                end
                            end
                        else
                            print("Support item is empty, Drop the support item right now!")
                            identity.botinfo("Support item is empty, Drop the support item right now! @everyone")
                        end
                    else
                        wrong = false
                        sleep(5000)
                        print("Id door world take support items is wrong, check ur id door!")
                        identity.botinfo("Id door world take support items is wrong, check ur id door! @everyone")
                        error()
                    end
                else
                    nuked = false
                    sleep(5000)
                    print("World take support items is nuked, check ur world!")
                    identity.botinfo("World take support items is nuked, check ur world! @everyone")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            level = false
            sleep(5000)
            print("World : "..world.." has level limit, change ur level world limit")
            identity.botinfo("World : "..world.." has level limit, change ur level world limit !, terminated script @everyone")
            error()
        end
    else
        people = false
        sleep(5000)
        print("World : "..world.." has full people, sleeping for 2 minutes")
        identity.botinfo("World : "..world.." has full people, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end

identity.writeFile = function(threads)
    local file = io.open("WorldStatus.txt","a")
    file:write(threads.."\n")
    file:close()
end

if BizzantiuM.version == "1.2" and BizzantiuM.handler == "akbarsht" then
    sleep(math.random(300,3000))
    if killghost then
        if findItem(6086) == 0 then
            identity.npg()
            identity.killing()
            identity.dropnpg()
        else
            identity.killing()
            identity.dropnpg()
        end
        print("All ghost are killed, please disable auto kill ghost then re-execute script")
        identity.botinfo("All ghost are killed, please disable auto kill ghost then re-execute script @everyone")
        error()
    end
    for idx, value in ipairs(worlds) do
        ::BACK::
        setJob(string.upper(typeMode))
        identity.warp(value,doorfarmList)
        identity.webhookinfo()
        if not people then
            if not level then
                if not subserver then
                    if not nuked then
                        if not wrong then
                            if typeMode == "harvest" then
                                identity.running(value)
                                identity.rechecking(value)
                            elseif typeMode == "collect" or typeMode == "gems" then
                                identity.running(value)
                            end
                        else
                            identity.writeFile("[ "..value.." ] is wrong id")
                            sleep(1000)
                            wrong = false
                            sleep(5000)
                            print(""..value.." is wrong door id, skipped world")
                            identity.botinfo("[ ||"..value.."|| ] is wrong door id, skipped world @everyone")
                        end
                    else
                        identity.writeFile("[ "..value.." ] is NUKED !!")
                        sleep(1000)
                        nuked = false
                        sleep(5000)
                        print(""..value.." is NUKED!, check ur world !!")
                        identity.botinfo("[ ||"..value.."|| ] is NUKED!, check ur world !! @everyone")
                    end
                else
                    subserver = false
                    sleep(5000)
                    print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                    identity.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                    sleep(120000)
                    goto BACK
                end
            else
                level = false
                sleep(5000)
                print("World : "..value.." has level limit, change ur level world limit")
                identity.botinfo("World : "..value.." has level limit, change ur level world limit !, terminated script @everyone")
                error()
            end
        else
            people = false
            sleep(5000)
            print("World : "..value.." has full people, sleeping for 2 minutes")
            identity.botinfo("World : "..value.." has full people, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
    print("[ "..getBot().name.." ] Already finished all world, Terminated script!")
    identity.botinfo("[ ||"..getBot().name.."|| ] Already finished all world, Terminated script! @everyone")
    if removeBot then
        removeBot(getBot().name)
        sleep(2000)
    end
    error()
else
    print("This script made by BizzantuM's server, buy at another server = RESELLER !!")
end
